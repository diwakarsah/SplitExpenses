{"version":3,"sources":["../node_modules/react-bootstrap/esm/Spinner.js","Pages/Model/DisplaySettlementModal.js"],"names":["Spinner","React","forwardRef","_ref","ref","bsPrefix","variant","animation","size","children","_ref$as","as","Component","className","props","_objectWithoutPropertiesLoose","bsSpinnerPrefix","useBootstrapPrefix","createElement","_extends","classNames","displayName","FinalSettlement","useState","message","setMessage","isLoading","setLoading","Modal","show","centered","onHide","hide","Header","closeButton","Title","Body","role","emailNotSend","success","data","Object","entries","map","value","key","v","k","name","amount","toFixed","totalSpending","console","log","style","color","Footer","onClick","billingDetails","token","jwt","header","Headers","fetch","method","body","JSON","stringify","headers","then","response","filename","get","split","blob","url","window","URL","createObjectURL","a","document","href","download","click","icon","email","user","members","member","userName","push","fullName","getEmailAddresses","RequestHandler","result","ok","length","send","close"],"mappings":"gNAKIA,EAAUC,IAAMC,YAAW,SAAUC,EAAMC,GAC7C,IAAIC,EAAWF,EAAKE,SAChBC,EAAUH,EAAKG,QACfC,EAAYJ,EAAKI,UACjBC,EAAOL,EAAKK,KACZC,EAAWN,EAAKM,SAChBC,EAAUP,EAAKQ,GACfC,OAAwB,IAAZF,EAAqB,MAAQA,EACzCG,EAAYV,EAAKU,UACjBC,EAAQC,YAA8BZ,EAAM,CAAC,WAAY,UAAW,YAAa,OAAQ,WAAY,KAAM,cAG3Ga,GADJX,EAAWY,YAAmBZ,EAAU,YACP,IAAME,EACvC,OAAON,IAAMiB,cAAcN,EAAWO,YAAS,CAC7Cf,IAAKA,GACJU,EAAO,CACRD,UAAWO,IAAWP,EAAWG,EAAiBR,GAAQQ,EAAkB,IAAMR,EAAMF,GAAW,QAAUA,KAC3GG,MAENT,EAAQqB,YAAc,UACPrB,Q,yBC8GAsB,UAhIQ,SAACR,GAAU,IAAD,EAEFS,mBAAS,IAFP,mBAEtBC,EAFsB,KAEdC,EAFc,OAGAF,oBAAS,GAHT,mBAGtBG,EAHsB,KAGZC,EAHY,KAuE7B,OACI,kBAACC,EAAA,EAAD,CAAOC,KAAMf,EAAMe,KAAOC,UAAQ,EAAEC,OAAQjB,EAAMkB,MAC9C,kBAACJ,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACrB,kBAACN,EAAA,EAAMO,MAAP,CAAatB,UAAU,cAAvB,qBAEFa,EA8BH,kBAACE,EAAA,EAAMQ,KAAP,KACI,yBAAKvB,UAAU,sDACf,kBAAC,EAAD,CAAUN,UAAU,SAAS8B,KAAK,SAAS/B,QAAQ,WAC/C,0BAAMO,UAAU,WAAhB,iBAjCK,kBAACe,EAAA,EAAMQ,KAAP,KACPZ,EAAQc,cAAc,uBAAGzB,UAAU,eAAb,IAA6BW,EAAQc,cAC3Dd,EAAQe,SAAS,uBAAG1B,UAAU,gBAAb,IAA8BW,EAAQe,SAClC,kBAAdzB,EAAM0B,KACX,6BACI,kDACC,4BACCC,OAAOC,QAAQ5B,EAAM0B,MAAMG,KAAI,SAACC,GAG9B,OADeA,EAAMC,GAAOF,KAAI,SAACG,EAAEC,GAAM,OAAO,wBAAIF,IAAKE,GAAID,EAAEE,KAAf,SAA2BJ,EADhE,GACqC,MAA0CE,EAAEG,OAAOC,QAAQ,WAK/G,iDACA,4BAEIpC,EAAMqC,cAAcR,KAAI,SAACC,EAAMC,GAC5B,OACI,wBAAIA,IAAKA,GAAMD,EAAMI,KAArB,MAA8BJ,EAAMK,OAAOC,QAAQ,QAK7DE,QAAQC,IAAI,YAAYvC,EAAMqC,gBAGnC,wBAAIG,MAAO,CAACC,MAAM,QAASzC,EAAM0B,OAWxC,kBAACZ,EAAA,EAAM4B,OAAP,KAC2B,kBAAd1C,EAAM0B,KAAkB,4BAAQ3B,UAAU,kBAAkB4C,QA1F1D,WACnB,IAAMjB,EAAO,CAAC,eAAkB1B,EAAM4C,eAAgB,eAAkB5C,EAAM0B,MACxEmB,EAAQ,UAAU7C,EAAM8C,IACxBC,EAAS,IAAIC,QAAQ,CAAC,eAAe,mBAAmB,cAAgBH,IAC7EI,MAAM,YAAY,CACdC,OAAQ,OACRC,KAAMC,KAAKC,UAAU3B,GACrB4B,QAASP,IACTQ,MAAK,SAAAC,GACF,IAAMC,EAAWD,EAASF,QAAQI,IAAI,uBAAuBC,MAAM,aAAa,GAChFH,EAASI,OAAOL,MAAK,SAAAK,GACjB,IAAIC,EAAMC,OAAOC,IAAIC,gBAAgBJ,GACjCK,EAAIC,SAAS9D,cAAc,KAC/B6D,EAAEE,KAAON,EACTI,EAAEG,SAAWX,EACbQ,EAAEI,gBA4EF,kBAAC,OAAD,CAAMC,KAAMF,aADiB,aAEvB,KACa,kBAAdpE,EAAM0B,KAAkB,4BAAQ3B,UAAU,kBAAkB4C,QAzE9D,WAChB9B,GAAW,GADS,MAvCG,WACtB,IAAI0D,EAAM,GACNC,EAAK,GAcT,OAbFxE,EAAMyE,QAAQ5C,KAAI,SAAA6C,GAUZ,OARwB,OAApBA,EAAOC,SAEPJ,EAAMK,KAAKF,EAAOC,UAIlBH,EAAKI,KAAKF,EAAOG,UAEdN,KAEXjC,QAAQC,IAAI,QAAQgC,GACb,CAACA,QAAMC,QAyBGM,GAAZP,EAFc,EAEdA,MAAMC,EAFQ,EAERA,KACN9C,EAAO,CAAC,QAAU6C,EAAO,eAAkBvE,EAAM4C,eAAgB,eAAkB5C,EAAM0B,MAC7FqD,YAAe,aAAarD,EAAK,OAAO1B,EAAM8C,KAAKS,MAAK,SAAAyB,GACpD1C,QAAQC,IAAI,MAAMyC,GACdA,EAAOC,IAAqB,IAAfT,EAAKU,QAElBvE,EAAW,CAACc,QAAQ,gCACpBZ,GAAW,IAENmE,EAAOC,IAAqB,IAAfT,EAAKU,QAEvBvE,EAAW,CAACc,QAAQ,8BAA+BD,aAAa,YAAIgD,GAAM,+EAC1E3D,GAAW,IAGLmE,EAAOC,KAEbtE,EAAW,CAACa,aAAa,uEACzBX,GAAW,SAsDR,kBAAC,OAAD,CAAMyD,KAAMa,SADiB,eAEvB,KACV,4BAAQpF,UAAU,oBAAoB4C,QAAS3C,EAAMkB,MACjD,kBAAC,OAAD,CAAMoD,KAAMc,UADhB","file":"static/js/19.2f2e1bec.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Spinner = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      animation = _ref.animation,\n      size = _ref.size,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"animation\", \"size\", \"children\", \"as\", \"className\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  var bsSpinnerPrefix = bsPrefix + \"-\" + animation;\n  return React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsSpinnerPrefix, size && bsSpinnerPrefix + \"-\" + size, variant && \"text-\" + variant)\n  }), children);\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import React, {useContext, useEffect, useState} from 'react';\nimport {Modal,Spinner} from 'react-bootstrap';\nimport { Icon } from 'react-icons-kit';\nimport {download,close,send} from 'react-icons-kit/fa/'\nimport {RequestHandler} from \"../service/RequestHandler\";\n\n\nconst FinalSettlement =(props)=> {\n\n    const [message,setMessage]=useState({});\n    const [isLoading,setLoading]=useState(false);\n\n\n    const getEmailAddresses = ()=>{\n        let email=[];\n        let user=[];\n      props.members.map(member=>{\n\n            if (member.userName !== null)\n            {\n                email.push(member.userName);\n            }\n            else\n            {\n                user.push(member.fullName);\n            }\n            return email;\n        });\n        console.log(\"email\",email);\n        return {email,user};\n    };\n\n    const handleDownload = () => {\n        const data = {\"billingDetails\": props.billingDetails, \"settlementList\": props.data};\n        const token = \"Bearer \"+props.jwt;\n        const header = new Headers({'Content-Type':'application/json','Authorization':token});\n         fetch('/download',{\n             method: 'post',\n             body: JSON.stringify(data),\n             headers: header})\n            .then(response => {\n                const filename = response.headers.get('Content-Disposition').split('filename=')[1];\n                response.blob().then(blob => {\n                    let url = window.URL.createObjectURL(blob);\n                    let a = document.createElement('a');\n                    a.href = url;\n                    a.download = filename;\n                    a.click();\n                });\n            });\n    };\n\n   const handleEmail = ()=>{\n       setLoading(true);\n       const{email,user}=getEmailAddresses();\n       const data = {\"senders\":email ,\"billingDetails\": props.billingDetails, \"settlementList\": props.data};\n         RequestHandler(\"/sendEmail\",data,\"post\",props.jwt).then(result=>{\n             console.log(\"res\",result)\n             if (result.ok && user.length ===0)\n             {\n                 setMessage({success:\"Email was successfully sent\"})\n                 setLoading(false);\n             }\n             else if (result.ok && user.length !==0)\n             {\n                 setMessage({success:\"Email was successfully sent\" ,emailNotSend:[...user]+\" didn't have the email address in the system. No email has sent to them...\"});\n                 setLoading(false);\n\n             }\n             else if (!result.ok)\n             {\n                 setMessage({emailNotSend:\"Email not sent. Something went wrong. Please try resending again..\"});\n                 setLoading(false);\n             }\n         });\n\n   };\n\n    return (\n        <Modal show={props.show}  centered  onHide={props.hide} >\n            <Modal.Header closeButton>\n                <Modal.Title className=\"txt-color \">Final Settlement</Modal.Title>\n            </Modal.Header>\n            {!isLoading?<Modal.Body>\n                {message.emailNotSend&&<p className=\"text-danger\"> {message.emailNotSend}</p>}\n                {message.success&&<p className=\"text-success\"> {message.success}</p>}\n               { typeof props.data !=='string'?\n                   <div>\n                       <h4>Suggested Payments</h4>\n                        <ul>\n                        {Object.entries(props.data).map((value) => {\n                            let key = 0;\n                           const result = value[key+1].map((v,k )=>{return(<li key={k}>{v.name} pays {value[key]} = {v.amount.toFixed(2)}</li>)});\n                           return result;\n                        })}\n\n                        </ul>\n                       <h4>Total Money Spent</h4>\n                       <ul>\n                       {\n                           props.totalSpending.map((value,key)=>{\n                              return (\n                                  <li key={key}>{value.name} = {value.amount.toFixed(2)}</li>\n                              )\n                           })\n                       }\n                       </ul>\n                       {console.log(\"spending \",props.totalSpending)}\n                    </div>\n                   :\n                   <h4 style={{color:\"red\"}}>{props.data}</h4>\n               }\n            </Modal.Body>:\n           <Modal.Body>\n               <div className=\"d-flex justify-content-center align-content-center\">\n               <Spinner  animation=\"border\" role=\"status\" variant=\"success\">\n                   <span className=\"sr-only\">Loading...</span>\n               </Spinner>\n               </div>\n           </Modal.Body>\n            }\n            <Modal.Footer>\n                { typeof props.data !=='string'? <button className=\"btn btn-success\" onClick={handleDownload}>\n                    <Icon icon={download}></Icon> Download\n                </button>:null}\n                { typeof props.data !=='string'? <button className=\"btn btn-success\" onClick={handleEmail}>\n                    <Icon icon={send}></Icon> Send Email\n                </button>:null}\n                <button className=\"btn btn-secondary\" onClick={props.hide}>\n                    <Icon icon={close}></Icon> Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\nexport default FinalSettlement;\n"],"sourceRoot":""}
{"version":3,"sources":["Pages/Model/BillEntryModel.js"],"names":["BillEntryForm","props","formEntryInitial","Date","getFullYear","getMonth","slice","getDate","useState","groupMembers","setGroupMembers","checkedMemberList","setCheckedMemberList","show","setShow","checkSuccess","setCheckSuccess","modalTitle","setModalTitle","isCheckAll","setIsCheckAll","errors","setErrors","handleCheckBox","event","index","target","checked","map","member","name","isChecked","i","filter","value","useForm","submitType","length","constructSendData","formField","sessionStorage","getItem","toString","user","id","RequestHandler","jwt","then","returnResult","console","log","status","ok","addBilling","selectedBill","transId","spittedAmount","flag","setInterval","ValidateBillEntryForm","handleSubmit","handleOnChange","changeFormField","error","useEffect","readyGroupMembers","indexOf","substring","members","updatedFeildValue","description","date","amount","paidBy","membersArray","splitedOn","split","handleEditValueSet","centered","onHide","hide","Header","closeButton","Title","className","Body","type","onChange","placeholder","key","checkBoxes","style","fontSize","size","Footer","marginRight","color","onClick","icon","close","plus"],"mappings":"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","file":"static/js/17.61ad2574.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Modal from 'react-bootstrap/Modal';\n\nimport {ValidateBillEntryForm} from '../service/ValidateForm';\nimport { Icon } from 'react-icons-kit';\nimport {plus,close} from 'react-icons-kit/fa/';\nimport {RequestHandler} from \"../service/RequestHandler\";\nimport {GreenCheckbox} from \"../service/CustomTooltip\";\nimport {useForm} from \"../service/useForm\";\n\n\nexport function BillEntryForm (props){\n    let formEntryInitial= {\"description\":\"\",\n            \"date\":new Date().getFullYear() + \"-\" + (\"0\" + (new Date().getMonth()+1)).slice(-2) + \"-\" + (\"0\" + new Date().getDate()).slice(-2),\n            \"amount\":\"\",\n            \"paidBy\":\"\",\n            };\n    const [groupMembers,setGroupMembers] = useState([]);\n    const [checkedMemberList,setCheckedMemberList] =useState([]);\n    const [show,setShow] = useState(false);\n    const [checkSuccess,setCheckSuccess] = useState(\"\");\n    const [modalTitle,setModalTitle]= useState(\"Add Bill Details\");\n    const [isCheckAll,setIsCheckAll]=useState(false);\n    const [errors,setErrors] =useState({});\n\n    const submit=(submitType)=>{\n       if (checkedMemberList.length !== 0) {\n           if (submitType === \"Add\" || typeof submitType === \"undefined\") {\n               let constructSendData = {\n                   ...formField,\n                   \"groupName\": sessionStorage.getItem('groupName'),\n                   \"splitedOn\": checkedMemberList.toString(),\n                   \"enteredId\": props.user.id\n               };\n\n\n               RequestHandler('/addBillDetails',constructSendData,'post',props.jwt).then(returnResult=>{\n                   console.log(\"BillResult\",returnResult.status);\n                   typeof returnResult.ok === \"undefined\" ? setCheckSuccess(true):setCheckSuccess(false);\n               });\n               props.addBilling();\n               setCheckedMemberList([]);\n               setGroupMembers(groupMembers.map((member) => ({...member, isChecked: false})));\n               setIsCheckAll(false);\n               setErrors(false);\n\n           } else if (submitType === \"Update\") {\n               let constructSendData = {\n                   \"transId\": props.selectedBill.transId,\n                   \"spittedAmount\": props.selectedBill.spittedAmount.toString(),\n                   ...formField,\n                   \"groupName\": sessionStorage.getItem('groupName'),\n                   \"splitedOn\": checkedMemberList.toString(),\n                   \"flag\": props.selectedBill.flag,\n                   \"enteredId\": props.user.id\n               };\n               console.log(\"csd\",constructSendData)\n               RequestHandler('/updateBillDetails', constructSendData, 'put', props.jwt).then(returnResult => {\n                   console.log(\"BillResult\", returnResult.status);\n                   if(typeof returnResult.ok === \"undefined\")\n                   {setCheckSuccess(true);\n                   setErrors(false);\n                   }\n                   else{\n                       setCheckSuccess(false)};\n\n               });\n               props.addBilling();\n               setCheckedMemberList([]);\n               setGroupMembers(groupMembers.map((member) => ({...member, isChecked: false})));\n               setIsCheckAll(false);\n               setErrors(false);\n\n           }\n           setCheckedMemberList([]);\n           setInterval(()=>{\n               setCheckSuccess(\"\")\n           },2000);\n       }\n       else {\n           setErrors({\"checkBoxes\":\"Please tick at least one of the check box\"});\n       }\n    };\n\n\n\n    const handleEditValueSet = (members)=> {\n        let updatedFeildValue ={\n            \"description\":props.selectedBill.description,\n            \"date\":new Date(props.selectedBill.date).getFullYear() + \"-\" + (\"0\" + (new Date(props.selectedBill.date).getMonth()+1)).slice(-2) + \"-\" + (\"0\" + new Date(props.selectedBill.date).getDate()).slice(-2),\n            \"amount\":props.selectedBill.amount,\n            \"paidBy\":props.selectedBill.paidBy,\n        };\n         setModalTitle(\"Edit Details\");\n        changeFormField(updatedFeildValue);\n        let membersArray = props.selectedBill.splitedOn.split(\",\");\n        setCheckedMemberList(membersArray);\n        setGroupMembers(members.map((member)=>(membersArray.indexOf(member.name) !== -1? {...member,isChecked:true}:member)));\n       if (props.groupMembers.length === membersArray.length)\n       {\n           setIsCheckAll(true);\n       }\n    };\n\n\n    const handleCheckBox=(event,index)=>{\n        if(index === -1)\n        {\n            if(event.target.checked) {\n                setIsCheckAll(true);\n                setCheckedMemberList(groupMembers.map((member) => (member.name)));\n                setGroupMembers(groupMembers.map((member) => ({...member, isChecked: true})));\n            }\n            else\n            {\n                setIsCheckAll(false);\n                setCheckedMemberList([]);\n                setGroupMembers(groupMembers.map((member) => ({...member, isChecked: false})));\n            }\n        }\n        else\n        {\n            if (event.target.checked)\n            {\n               setCheckedMemberList([...checkedMemberList,groupMembers[index].name]);\n               setGroupMembers(groupMembers.map((member,i)=>(index===i?{...member,isChecked:true}:member)));\n            }\n            else\n            {\n                setCheckedMemberList(checkedMemberList.filter((member)=>{return (member!==event.target.value)}));\n                setGroupMembers(groupMembers.map((member,i)=>(index===i?{...member,isChecked:false}:member)));\n            }\n\n        }\n\n    };\n\n    const {handleSubmit, handleOnChange,changeFormField, error, formField} = useForm(submit,formEntryInitial,ValidateBillEntryForm);\n\n    useEffect(()=>{\n        setShow(props.show);\n        const readyGroupMembers = props.groupMembers.map(member=>{\n            console.log(\"memeber\",member);\n           let index = member.indexOf(\"(\")===-1 ?member.indexOf(' '):-1;\n            let firstName = index!== -1 ? (member.substring(0,index)+\"_\"+member.substring(index+1,index+4)):member;\n\n            let temp = {\n                \"name\": firstName,\n                \"isChecked\": false\n            };\n            return temp;\n        });\n        setGroupMembers(readyGroupMembers);\n        if (props.selectedBill !== null)\n        {\n            handleEditValueSet(readyGroupMembers);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[props.groupMembers,props.show]);\n\n\n    return (\n        <Modal show={show} centered onHide={props.hide}  >\n            <Modal.Header closeButton >\n                <Modal.Title className=\" txt-color\"> {modalTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <form >\n                    <div className=\"from-group \">\n                            <input type=\"text\"\n                                   name=\"description\"\n                                   onChange={handleOnChange}\n                                   value={formField.description}\n                                   className={`form-control ${error.description && 'is-invalid'}`}\n                                   placeholder=\"Description\"/>\n                        {error.description &&(<div className=\"invalid-feedback\">{error.description}</div>)}\n                    </div>\n                    <div className=\"from-group row\">\n                        <div className=\"col\">\n                        <input type=\"date\"\n                               name=\"date\"\n                               onChange={handleOnChange}\n                               value={formField.date}\n                               className={`form-control ${error.date && 'is-invalid'}`}\n                               placeholder=\"Enter Date\"/>\n                            {error.date &&(<div className=\"invalid-feedback\">{error.date}</div>)}\n                        </div>\n                        <div className=\"col\">\n                            <input\n                                type=\"number\"\n                                name=\"amount\"\n                                onChange={handleOnChange}\n                                value={formField.amount}\n                                className={`form-control ${error.amount && 'is-invalid'}`}\n                                   placeholder=\"Amount\"/>\n                            {error.amount &&(<div className=\"invalid-feedback\">{error.amount}</div>)}\n                        </div>\n                    </div>\n                    <div className=\"from-group\">\n                            <select\n                                className={`form-control ${error.paidBy && 'is-invalid'}`}\n                                name=\"paidBy\"  value={formField.paidBy}\n                                onChange={handleOnChange}>\n                                <option value=\"\" >Paid By....</option>\n                                {\n                                    groupMembers.map((member,index)=>{\n                                        return (<option value={member.name} key={index}>{member.name}</option>);\n                                    })\n                                }\n                            </select>\n                        {error.paidBy &&(<div className=\"invalid-feedback\">{error.paidBy}</div>)}\n                    </div>\n\n                    <div className={`from-group ${errors.checkBoxes && 'is-invalid'}`}>\n                        <label className=\"col-form-label-sm\">Split On:</label>\n                        <ul className=\"cust-chcekbox\">\n                            <li ><GreenCheckbox onChange={(event)=>handleCheckBox(event,-1)} checked={isCheckAll} /><label className=\"col-form-label cust-checkbox-label\">All</label></li>\n                        {groupMembers.map((member,index)=>{\n                           return (\n                               <li   key={index}>\n                                    <GreenCheckbox  checked={member.isChecked}  className=\"custom-checkbox\" value={member.name} onChange={(event)=>handleCheckBox(event,index)}/>\n                                   <label  ><span className=\"text-uppercase cust-checkbox-label\">{member.name.substring(0,1)}</span><span style={{fontSize:\"12px\"}}>{member.name.substring(1,member.size)}</span></label>\n                               </li>\n                           );\n                        })}\n\n                        </ul>\n                    </div>\n                    {errors.checkBoxes &&(<div className=\"invalid-feedback\">{errors.checkBoxes}</div>)}\n                </form>\n            </Modal.Body>\n            <Modal.Footer>\n                <div style={{marginRight: \"auto\"}}>  {(checkSuccess === true) ? <h5 style={{color:\"green\"}}>Successfully Added </h5>: (checkSuccess === false)?<h5 style={{color:\"red\"}}> Error!!Please enter again</h5>:null}</div>\n                <button className=\"btn btn-secondary\" onClick={props.hide}>\n                    <Icon icon={close}></Icon>  Close\n                </button>\n                {props.selectedBill === null?\n                <button  type=\"button\" className=\"btn btn-success\" value=\"Add\" onClick={handleSubmit}><Icon  icon={plus}></Icon> Add</button>:\n                <button  type=\"button\" className=\"btn btn-success\" value=\"Update\" onClick={handleSubmit}>\n                    <Icon   icon={plus}></Icon> Update\n                </button>}\n\n            </Modal.Footer>\n        </Modal>\n    )\n}\nexport default BillEntryForm;\n"],"sourceRoot":""}